/*****************************************************************************
* Model: Aquarium.qm
* File:  ./Aquarium.ino
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::Aquarium.ino} .......................................................*/
#include "qpn.h"     // QP-nano framework
#include "Arduino.h" // Arduino API

//============================================================================
// events used in this application...
enum AquariumSignals {
    WATER_LEAK_SENSOR_SIG = Q_USER_SIG, // water leakage is detected
    TEMPERATURE_SENSOR_SIG,             // water temperature is to high
    LOW_LEVEL_SENSOR_SIG,               // water level low is reached
    HIGH_LEVEL_SENSOR_SIG               // water level high is reached
};

//============================================================================
// declare all AO classes...

#if ((QP_VERSION < 580) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpn version 5.8.0 or higher required
#endif

/*${AOs::Aquarium} .........................................................*/
typedef struct Aquarium {
/* protected: */
    QActive super;
} Aquarium;

/* protected: */
static QState Aquarium_initial(Aquarium * const me);
static QState Aquarium_operationalState(Aquarium * const me);
static QState Aquarium_sleepModeState(Aquarium * const me);
static QState Aquarium_waterDrainState(Aquarium * const me);
static QState Aquarium_waterFillState(Aquarium * const me);
static QState Aquarium_emergencyState(Aquarium * const me);

//...

// define all AO instances and event queue buffers for them...
Aquarium AO_Aquarium;
static QEvt l_aquariumQSto[10]; // Event queue storage for Aquarium
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QMActiveCB const Q_ROM QF_active[] = {
    { (QMActive *)0,            (QEvt *)0,      0U                    },
    { (QMActive *)&AO_Aquarium, l_aquariumQSto, Q_DIM(l_aquariumQSto) }
};

//============================================================================
// Board Support Package (BSP)
enum BSP_ValvesSignal { // valve signals ...
    EMERGENCY_LIGHT_on,
    MAIN_WATER_SUPPLY_VALVE_on,
    MAIN_WATER_SUPPLY_VALVE_off,
    WATER_DRAIN_VALVE_on,
    WATER_DRAIN_VALVE_off,
    WATER_FILL_VALVE_on,
    WATER_FILL_VALVE_off
};

// various other constants for the application...
enum {
    BSP_TICKS_PER_SEC = 100, // number of system clock ticks in one second

    // the pin number of the on-board input
    WATER_LEAK_SENSOR = 2,
    TEMPERATURE_SENSOR = 3,
    LOW_LEVEL_SENSOR = 4,
    HIGH_LEVEL_SENSOR = 5,

    // the pin number of the on-board output
    EMERGENCY_LIGHT = 6,
    MAIN_WATER_SUPPLY_VALVE = 7,
    WATER_DRAIN_VALVE = 8,
    WATER_FILL_VALVE = 9,
};

//............................................................................
void BSP_signalValves(enum BSP_ValvesSignal sig) {
    switch (sig) {
        case EMERGENCY_LIGHT_on:
            Serial.println(F("EMERGENCY_LIGHT_on"));
            digitalWrite(EMERGENCY_LIGHT, HIGH);
            break;
        case MAIN_WATER_SUPPLY_VALVE_on:
            Serial.println(F("MAIN_WATER_SUPPLY_VALVE_on"));
            digitalWrite(MAIN_WATER_SUPPLY_VALVE, HIGH);
            break;
        case MAIN_WATER_SUPPLY_VALVE_off:
            Serial.println(F("MAIN_WATER_SUPPLY_VALVE_off"));
            digitalWrite(MAIN_WATER_SUPPLY_VALVE, LOW);
            break;
        case WATER_DRAIN_VALVE_on:
            Serial.println(F("WATER_DRAIN_VALVE_on"));
            digitalWrite(WATER_DRAIN_VALVE, HIGH);
            break;
        case WATER_DRAIN_VALVE_off:
            Serial.println(F("WATER_DRAIN_VALVE_off"));
            digitalWrite(WATER_DRAIN_VALVE, LOW);
            break;
        case WATER_FILL_VALVE_on:
            Serial.println(F("WATER_FILL_VALVE_on"));
            digitalWrite(WATER_FILL_VALVE, HIGH);
            break;
        case WATER_FILL_VALVE_off:
            Serial.println(F("WATER_FILL_VALVE_off"));
            digitalWrite(WATER_FILL_VALVE, LOW);
            break;
    }
}

//............................................................................
void BSP_showState(char const *state) {
    Serial.print(F("State->"));
    Serial.println(state);
}

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&AO_Aquarium.super, Q_STATE_CAST(&Aquarium_initial));

    // initialize the hardware used in this sketch...
    // set the sensor pins to input and activate the internal pullup resistor
    pinMode(WATER_LEAK_SENSOR, INPUT_PULLUP);
    pinMode(TEMPERATURE_SENSOR, INPUT_PULLUP);
    pinMode(LOW_LEVEL_SENSOR, INPUT_PULLUP);
    pinMode(HIGH_LEVEL_SENSOR, INPUT_PULLUP);

    // set the EMERGENCY_LIGHT pin to output
    pinMode(EMERGENCY_LIGHT, OUTPUT);
    // set the valve pins to outputs
    pinMode(MAIN_WATER_SUPPLY_VALVE, OUTPUT);
    pinMode(WATER_DRAIN_VALVE, OUTPUT);
    pinMode(WATER_FILL_VALVE, OUTPUT);

    Serial.begin(115200); // set the highest standard baud rate of 115200 bps
    Serial.print(F("Start, QP-nano version: "));
    Serial.println(QP_VERSION);
    Serial.println("");
    Serial.println(F("Aquarium control"));
    Serial.println("");
}
//............................................................................
void loop() {
    QF_run(); // run the QP-nano application
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0

    // read inputs over Serial
    if (Serial.available() > 0) {
        switch (Serial.read()) { // read the incoming byte
            // events are posted directly instead of publishing
            case 'e':
            case 'E':
                QACTIVE_POST_ISR((QMActive *)&AO_Aquarium, WATER_LEAK_SENSOR_SIG, 0U);
                break;
            case 't':
            case 'T':
                QACTIVE_POST_ISR((QMActive *)&AO_Aquarium, TEMPERATURE_SENSOR_SIG, 0U);
                break;
            case 'l':
            case 'L':
                QACTIVE_POST_ISR((QMActive *)&AO_Aquarium, LOW_LEVEL_SENSOR_SIG, 0U);
                break;
            case 'h':
            case 'H':
                QACTIVE_POST_ISR((QMActive *)&AO_Aquarium, HIGH_LEVEL_SENSOR_SIG, 0U);
                break;
        }
    }

    // read the digital inputs
    // low active because of the internal pullup resistor
    // events are posted directly instead of publishing
    if (digitalRead(WATER_LEAK_SENSOR) == LOW) {
        QACTIVE_POST_ISR((QMActive *)&AO_Aquarium, WATER_LEAK_SENSOR_SIG, 0U);
    }
    else if (digitalRead(TEMPERATURE_SENSOR) == LOW) {
        QACTIVE_POST_ISR((QMActive *)&AO_Aquarium, TEMPERATURE_SENSOR_SIG, 0U);
    }
    else if (digitalRead(LOW_LEVEL_SENSOR) == LOW) {
        QACTIVE_POST_ISR((QMActive *)&AO_Aquarium, LOW_LEVEL_SENSOR_SIG, 0U);
    }
    else if (digitalRead(HIGH_LEVEL_SENSOR) == LOW) {
        QACTIVE_POST_ISR((QMActive *)&AO_Aquarium, HIGH_LEVEL_SENSOR_SIG, 0U);
    }
}

//============================================================================
// QP-nano callbacks...
void QF_onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U << WGM21) | (0U << WGM20);
    TCCR2B = (1U << CS22 ) | (1U << CS21) | (1U << CS20); // 1/2^10
    ASSR  &= ~(1U << AS2);
    TIMSK2 = (1U << OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}
//............................................................................
void QV_onIdle(void) { // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 << SM0) | (1 << SE); // idle mode, adjust to your project
    QV_CPU_SLEEP(); // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET(); // reset the CPU
}

//============================================================================
// define all AO classes (state machines)...
/*${AOs::Aquarium} .........................................................*/
/*${AOs::Aquarium::SM} .....................................................*/
static QState Aquarium_initial(Aquarium * const me) {
    /* ${AOs::Aquarium::SM::initial} */
    return Q_TRAN(&Aquarium_operationalState);
}
/*${AOs::Aquarium::SM::operationalState} ...................................*/
static QState Aquarium_operationalState(Aquarium * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Aquarium::SM::operationalState} */
        case Q_ENTRY_SIG: {
            BSP_showState("operationalState");
            BSP_signalValves(MAIN_WATER_SUPPLY_VALVE_on);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Aquarium::SM::operationalState} */
        case Q_EXIT_SIG: {
            BSP_signalValves(MAIN_WATER_SUPPLY_VALVE_off);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Aquarium::SM::operationalState::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Aquarium_sleepModeState);
            break;
        }
        /* ${AOs::Aquarium::SM::operationalState::WATER_LEAK_SENSOR} */
        case WATER_LEAK_SENSOR_SIG: {
            status_ = Q_TRAN(&Aquarium_emergencyState);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::Aquarium::SM::operationalState::sleepModeState} ...................*/
static QState Aquarium_sleepModeState(Aquarium * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Aquarium::SM::operationalState::sleepModeState} */
        case Q_ENTRY_SIG: {
            BSP_showState("sleepModeState");
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Aquarium::SM::operationalState::sleepModeState::TEMPERATURE_SENSOR} */
        case TEMPERATURE_SENSOR_SIG: {
            status_ = Q_TRAN(&Aquarium_waterDrainState);
            break;
        }
        default: {
            status_ = Q_SUPER(&Aquarium_operationalState);
            break;
        }
    }
    return status_;
}
/*${AOs::Aquarium::SM::operationalState::waterDrainState} ..................*/
static QState Aquarium_waterDrainState(Aquarium * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Aquarium::SM::operationalState::waterDrainState} */
        case Q_ENTRY_SIG: {
            BSP_showState("waterDrainState");
            BSP_signalValves(WATER_DRAIN_VALVE_on);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Aquarium::SM::operationalState::waterDrainState} */
        case Q_EXIT_SIG: {
            BSP_signalValves(WATER_DRAIN_VALVE_off);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Aquarium::SM::operationalState::waterDrainState::LOW_LEVEL_SENSOR} */
        case LOW_LEVEL_SENSOR_SIG: {
            status_ = Q_TRAN(&Aquarium_waterFillState);
            break;
        }
        default: {
            status_ = Q_SUPER(&Aquarium_operationalState);
            break;
        }
    }
    return status_;
}
/*${AOs::Aquarium::SM::operationalState::waterFillState} ...................*/
static QState Aquarium_waterFillState(Aquarium * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Aquarium::SM::operationalState::waterFillState} */
        case Q_ENTRY_SIG: {
            BSP_showState("waterFillState");
            BSP_signalValves(WATER_FILL_VALVE_on);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Aquarium::SM::operationalState::waterFillState} */
        case Q_EXIT_SIG: {
            BSP_signalValves(WATER_FILL_VALVE_off);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Aquarium::SM::operationalState::waterFillState::HIGH_LEVEL_SENSOR} */
        case HIGH_LEVEL_SENSOR_SIG: {
            status_ = Q_TRAN(&Aquarium_sleepModeState);
            break;
        }
        default: {
            status_ = Q_SUPER(&Aquarium_operationalState);
            break;
        }
    }
    return status_;
}
/*${AOs::Aquarium::SM::emergencyState} .....................................*/
static QState Aquarium_emergencyState(Aquarium * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Aquarium::SM::emergencyState} */
        case Q_ENTRY_SIG: {
            BSP_showState("emergencyState");
            BSP_signalValves(EMERGENCY_LIGHT_on);
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}

//...

